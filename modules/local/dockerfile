FROM debian:trixie-20240612-slim

ENV PYTHON_VERSION='3.12.6'

#Install the Debian dependencies to allow us to make packages from source
RUN apt-get update \
    && apt-get install -y curl gcc g++ make tar procps zlib1g-dev bzip2 libbz2-dev libcurl4-gnutls-dev liblzma-dev libssl-dev libffi-dev libsqlite3-dev \
    && apt-get clean -y && rm -rf /var/lib/apt/lists/*

#Install python from source and symlink it to python (python3-as-python package is an alternative for this)
#--enable-shared: builds a shared python library so that when executing python in memory, the OS can link dependent shared libraries so python can run
#--enable-optimizations: improves performance as python has built in profile guided optimisation for use when compiling
#--enable-ipv6: allows python to interact with internet protocal v6 addresses
#LDFLAGS=-Wl allows gcc to interpret following tokens as options when compiling
#-rpath: tells gcc what the path to hard code for shared libraries is
#--disable-new-dtags: tells the linker software in gcc to use the rpath argument instead of dynamically creating tags itself
RUN curl -O "https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz" -o "/Python-${PYTHON_VERSION}.tgz" && \
    tar xvzf "/Python-${PYTHON_VERSION}.tgz" && cd Python-${PYTHON_VERSION} && \
    ./configure --prefix=/opt/python/${PYTHON_VERSION} --enable-shared --enable-optimizations --enable-ipv6 LDFLAGS=-Wl,-rpath=/opt/python/${PYTHON_VERSION}/lib,--disable-new-dtags && \
    make && make install && \
    rm -rf "/Python-${PYTHON_VERSION}"* && \
    ln -s /opt/python/${PYTHON_VERSION}/bin/python3 /opt/python/${PYTHON_VERSION}/bin/python && \
    ln -s /opt/python/${PYTHON_VERSION}/bin/pip3 /opt/python/${PYTHON_VERSION}/bin/pip

ENV PATH="${PATH}:/opt/python/${PYTHON_VERSION}/bin"

COPY Pipfile /Pipfile

COPY Pipfile.lock /Pipfile.lock

RUN pip3 install --no-cache-dir pipenv==2024.2.0 psycopg2

RUN pipenv install --system --deploy

COPY Dockerfile /Dockerfile

